// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/role.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x4d\x73\xdb\x38\xd2\xbe\xfb\x57\x74\x79\x0e\x9e\xd4\x6b\x49\x6f\xb2\x97\x5d\xdd\x52\xce\xcc\x94\x77\x67\x13\x57\xec\xcd\x25\xc9\xa1\x05\xb6\xc8\x5e\x83\x00\x17\x68\x4a\x51\xa6\xe6\xbf\x6f\x35\x40\x4a\x94\x4c\xc6\x76\xaa\x66\x16\x17\x5b\xf8\xe8\xef\x7e\xba\x01\x9e\xcd\x66\xb3\x33\x6c\xf8\x03\x85\xc8\xde\x2d\x01\x1b\xa6\x2f\x42\x4e\x7f\xc5\xf9\xfd\x5f\xe3\x9c\xfd\x62\xf3\x72\x45\x82\x2f\xcf\xee\xd9\x15\x4b\xb8\x6a\xa3\xf8\xfa\x3d\x45\xdf\x06\x43\x6f\x68\xcd\x8e\x85\xbd\x3b\xab\x49\xb0\x40\xc1\xe5\x19\x00\x3a\xe7\x05\x75\x3a\xea\x4f\x00\xe3\x9d\x04\x6f\x2d\x85\x59\x49\x6e\x7e\xdf\xae\x68\xd5\xb2\x2d\x28\x24\x0e\x3d\xff\x1f\x5b\x77\xef\xfc\xd6\xbd\x38\x03\x30\x81\x12\x85\x3b\xae\x29\x0a\xd6\xcd\x12\x5c\x6b\xed\x19\x80\xc3\x9a\x96\x60\x6c\x1b\x85\x42\x9c\x63\xf0\x73\xdf\x90\x8b\x15\xaf\x65\xce\xfe\x2c\x36\x64\x94\x6d\x19\x7c\xdb\x2c\xe1\xc1\x7a\xa6\xd0\x49\xd6\x69\x95\x89\xa5\x19\xcb\x51\xfe\x31\x9c\xfd\x95\xa3\xa4\x95\xc6\xb6\x01\xed\x81\x75\x9a\x8c\xec\xca\xd6\x62\xd8\x4f\x9f\x01\x44\xe3\x1b\x1a\x52\x8d\xed\x2a\x74\x26\xeb\xf8\x46\x41\x69\xe3\x12\x7e\xfb\xfd\x0c\x60\x83\x96\x8b\xa4\x6d\x5e\x54\x71\x5f\xdf\x5c\x7f\xf8\xcb\xad\xa9\xa8\xc6\x3c\x09\x50\x50\x34\x81\x9b\xb4\xaf\x27\x0e\x1c\x41\x2a\x82\xbc\x13\xd6\x3e\xa4\x9f\xbd\x88\xf0\xfa\xe6\xba\x3b\xdd\x04\xdf\x50\x10\xee\x25\xd0\x31\x70\xfe\x7e\xee\x84\xcf\x85\x0a\x92\xf7\x40\xa1\xee\xa6\xcc\xb0\x73\x1a\x15\x10\x33\x6b\xbf\x06\xa9\x38\x42\xa0\x26\x50\x24\x97\x03\x60\x40\x16\x74\x0b\x3a\xf0\xab\x7f\x93\x91\x39\xdc\x52\x50\x22\x10\x2b\xdf\xda\x42\x63\x64\x43\x41\x20\x90\xf1\xa5\xe3\xaf\x7b\xca\x11\xc4\x27\x96\x16\x85\x3a\x57\xf4\x83\x9d\x50\x70\x68\xd5\x84\x2d\x5d\x02\xba\x02\x6a\xdc\x41\x20\xe5\x01\xad\x1b\x50\x4b\x5b\xe2\x1c\xfe\xe9\x03\x01\xbb\xb5\x5f\x42\x25\xd2\xc4\xe5\x62\x51\xb2\xf4\xe1\x6e\x7c\x5d\xb7\x8e\x65\xb7\x48\x41\xcb\xab\x56\x7c\x88\x8b\x82\x36\x64\x17\x91\xcb\x19\x06\x53\xb1\x90\x91\x36\xd0\x02\x1b\x9e\x25\xc1\x5d\x8a\xf6\x79\x5d\xfc\xb0\x77\xf4\xc5\x40\x52\xd9\x69\x40\x44\x09\xec\xca\xfd\x74\x8a\xbd\x49\xbb\x6b\x0c\xaa\x77\xb1\x3b\x96\xe5\x3f\x98\x57\xa7\xd4\x2a\xef\x7f\xba\xbd\x83\x9e\x69\x72\xc1\xb1\xcd\x93\xb5\x0f\xc7\xe2\xc1\xf0\x6a\x28\x76\x6b\x0a\xd9\x71\xeb\xe0\xeb\x44\x91\x5c\xd1\x78\x76\xd2\x45\x12\x93\x3b\x36\x7a\x6c\x57\x35\x8b\x7a\xfa\x3f\x2d\x45\x51\xff\xcc\xe1\x2a\x25\x3d\xac\x08\xda\xa6\x40\xa1\x62\x0e\xd7\x0e\xae\xb0\x26\x7b\x85\x91\xfe\x70\xb3\xab\x85\xe3\x4c\x4d\xfa\xb8\xe1\x87\x58\x75\xbc\x31\x5b\x6b\x3f\xdd\x43\xc9\xa8\x87\xba\x0c\xbc\x6d\xc8\x1c\x65\x46\x41\x91\x83\x46\xaf\xa0\x90\xc6\xfc\x10\x5d\xa6\x73\x51\x47\x49\x8e\x36\xf8\xab\x2f\x4b\x76\xe5\xf1\xd2\xf4\x21\x1d\x68\xc2\x5b\x85\xc5\x07\x0b\x13\x16\xe8\x87\xf1\x6e\xcd\xe5\x08\x06\xec\x99\xa2\x68\x86\x2d\xe1\xe2\xe3\xff\xcf\xfe\xf6\xf9\xff\xe6\xf9\xcf\xc5\x73\x19\xd5\xde\xb1\x78\x5d\xfa\xe5\xea\xf6\x27\xb7\xe1\xe0\x5d\x4d\x4e\xc6\x78\x92\x6b\xeb\xb1\xf9\x19\xbc\x61\x2c\x9d\x8f\xc2\x26\xde\x04\x5f\x8c\xee\xb9\x3b\xc5\x88\xe7\x4a\xf7\x9e\xca\x09\x63\x3c\x91\xc6\x1d\x39\x1c\xd7\xec\x9b\x04\x52\x55\x6a\xd0\x3c\xd7\x8b\xa3\x91\x0b\x7b\x70\x24\xb9\xaa\xc8\xdc\x53\x78\x4e\x3c\x45\x96\xb1\x69\x00\x16\xaa\x47\x17\x1e\x51\xae\x5f\xc6\x10\x70\xf7\x54\x05\x7a\x54\xbb\x2e\x4e\x39\x1e\x25\x62\xdf\x8d\x5c\xbf\xe9\xab\xe1\xeb\xaf\x6d\xa0\xc1\xf1\x5c\x9c\x68\x50\xa2\x9f\x20\xf8\x38\x22\xe4\xba\xfd\x18\x26\xa4\x5d\x47\xa8\xe0\x57\x51\x61\xf7\xbb\x60\xc1\x78\x57\xf0\xa0\x9d\x9a\x62\xbe\xdf\xd6\xd5\x0d\x92\xc4\xa7\x9f\x06\x76\x51\xd0\x19\x8a\xf3\x13\x32\x13\x5e\x3d\xa2\x7e\x7e\xa0\x73\x28\x26\xb9\x9e\xab\x66\xa9\xda\x1f\x55\xf8\x8b\x98\x75\x3d\x65\xa6\x63\x20\x2a\x06\xd2\x33\xfb\xc6\x13\x6a\x32\x15\x3a\x8e\x75\x0a\x60\x57\x50\xa1\x0d\x80\x16\x96\x48\x05\x6c\x2b\x72\x6a\xd0\x11\xa2\x05\x09\xb2\x8d\x7b\x21\x0e\x62\x29\x0f\xad\x4e\x08\x4d\x60\x1f\x18\x52\x9b\x09\x3e\xc0\x36\xf5\x1e\x69\xad\x69\xec\x69\x64\xa6\x30\xf0\x80\xd6\x1e\x6c\x97\xc8\x43\xc9\x1b\x72\xa0\x35\x7a\x0e\x9f\xdc\x50\x9f\xae\x9d\x59\x11\x60\x51\xd0\x18\x46\x89\x07\xfa\xd2\x58\x36\x2c\x76\x97\xfb\x9e\xdd\xc0\xf7\x20\x15\x8a\x2a\x1b\x62\xea\x67\x8c\xaf\x1b\xef\x92\xb5\x4d\x32\xd6\xca\xb7\x63\x08\x17\x50\xaa\x54\xcb\xd1\xa5\xd2\xcc\x21\xb7\x08\x3e\xd2\x11\xf5\x64\xcb\x54\xf7\xb5\x4a\xa5\xaa\xef\xf5\xe4\x08\xc9\x81\x0d\xe3\x1c\xde\x39\x43\x5d\x4c\x17\x97\x29\xa8\x6b\x42\xa7\x4c\x92\x49\x0e\xf1\x61\xd0\x41\x6e\x06\x46\x68\xaa\x73\x4b\x2a\x00\xc3\x8a\x25\x60\x60\xbb\x83\x19\xb0\xee\x36\xbe\xa6\x08\x0d\x06\xe9\x13\xf6\xf5\xcd\x75\x6e\xea\x2a\xcc\x69\x14\xb1\x1e\x23\xba\x42\x73\xbf\xc5\x50\xc4\x59\xda\xbd\xf6\x21\xff\x52\xdb\xa1\xf0\x8a\x2d\x4b\x32\xb5\xa1\xe0\xba\x08\xd9\x65\xb5\x13\xbf\x31\xdd\xf7\x12\xcc\xcf\x1f\x2c\x7f\x0b\x3b\x01\x2c\x46\xb9\x0b\xe8\x22\xf7\x37\x98\x71\xc4\x5c\xfb\x50\xa3\x2c\x41\xfb\xa5\x99\xf0\xa8\x66\x8f\xe2\x6a\x4d\x31\x62\x39\xc1\xe1\x91\xb3\x81\x30\x8e\x97\xba\x29\x68\x79\x9f\x4e\x28\xbe\x9c\x24\x27\x82\x77\x34\xdb\xfa\x50\x5c\x1e\xba\xbe\x51\xc2\x70\x72\x45\xd8\x83\x33\x0a\x95\x3e\xec\xf4\xb7\xc1\x36\xd2\x7e\xa1\x0d\x81\x9c\x74\xd8\x3b\x06\x27\x3a\xae\x65\x44\xaa\x04\x19\xec\x92\xe7\x59\x29\xb6\xd2\xb4\x72\x09\xb1\x35\x15\x60\x4c\x32\x5b\x76\x53\x82\xea\x45\xd5\x88\x85\x52\x91\xb4\x3b\xaa\xf1\xc5\x0e\x62\x5b\xd7\x18\xf8\x6b\x0a\x7f\x93\x45\xec\xd0\x21\x09\x3f\x21\xe7\x23\x0e\x79\x58\x5e\x9e\x7c\x34\x2d\x3f\xee\xc9\x03\x8c\xdf\xed\x1a\xea\x0b\xa6\x1e\xde\x9b\x7b\x9f\xc7\x49\xd5\x38\x61\x1b\xd9\x35\x6c\xd0\xda\x9d\xa6\x7e\xef\xf0\x02\x34\x02\x14\x58\x63\xe5\x83\x40\x53\x85\xd4\xfc\x0f\x21\x32\x31\x9b\xa2\xda\xa1\x27\xbb\x82\x35\x1e\xba\x6a\xc9\x09\xf2\xe1\xd3\x39\xae\x9c\xe6\x8c\x9d\x49\x68\xe9\xd3\x39\x34\xde\x62\x60\xd9\xcd\xe1\x67\x3f\x06\x60\x3a\xe8\x0b\xd6\x8d\xa5\x4b\xe0\x53\xfd\x7a\x2e\x31\x57\x15\x54\x72\x6c\x76\x39\x8e\xd2\xa5\xfc\x72\x4a\xf9\x24\x0d\xc7\x7c\x75\xff\x74\x0e\x06\x63\x32\x66\x13\xfc\x0a\x57\x76\x97\x76\xa8\xac\x97\x10\xfd\x31\xdb\x6f\x6b\xbe\xd2\x44\xb0\x96\x0a\xf8\x74\x7e\xed\x3a\xf2\x23\x08\x04\x8f\x45\x44\x2e\x01\xf4\xa0\x75\xd2\x1e\x39\x87\xd9\xc8\x82\x52\x7c\x30\x3d\xd9\x9f\x4d\x37\x75\x8a\x8e\x28\x3e\x4c\xdc\x2c\x26\x05\x0f\xa4\x97\xfc\xe2\x5d\xe2\xf5\x20\x0f\x9e\xd2\xa6\xe4\xa3\xef\x69\x4d\x29\x21\xd3\xd3\x13\xb2\x8b\x40\xce\xb7\x65\x95\x6e\xa0\x8a\xba\x29\x10\x3d\x58\x12\xd8\xf9\x76\xac\xd3\x75\x7a\xfb\x13\x8d\xe5\xda\x17\xbc\xce\x2e\x0d\xd4\xd5\xcd\xee\x15\xe3\x99\x95\x61\xfc\xc1\x65\x42\x95\xd7\x37\xd7\xfd\x33\x4b\x9f\x9b\x21\xeb\x35\xc2\xf7\x9b\x66\xcd\x63\xcd\x64\x8b\x1b\x94\xea\x09\xbc\x2f\xae\xd7\x9d\xae\xa9\x89\xf0\x9a\x1c\x4c\x86\x8e\x3a\xbc\xd4\x14\x11\x6a\x7b\x3d\x11\xd4\xda\xd8\x39\xe1\x40\xdd\x89\xcb\xfc\xd4\xd0\xbd\x68\x1c\x5e\x7e\xd4\x45\x80\x39\x9b\xe0\xef\xb7\xef\xde\x2e\x7e\xf1\x13\x24\x93\x16\x80\xc6\x50\xec\x1a\x4c\xbd\x47\x1e\x20\xbd\xbb\x7e\xdf\xa6\xd6\xb3\x46\xc7\x6b\x8a\x32\xef\x78\x50\x88\x1f\x5f\x7d\x9e\x2a\x21\x3f\xfb\xf0\x00\x2d\xf6\xef\x27\x7d\x40\x71\xcc\xe6\xd8\x53\x84\x2d\x4b\xc5\x53\x69\xad\xa0\x52\x74\x6a\xe7\x66\x53\xf0\x9e\xc0\x77\xea\xb6\x04\x96\xef\x69\x09\xe7\x1a\x6d\x03\x31\x7f\xd3\xeb\xe0\xef\xe3\x79\x0f\xf0\xe3\xb6\xa2\x40\x70\xae\x9b\xce\xb3\x70\xfb\x67\x32\x9d\x1b\x60\x79\x27\x64\x6a\x2a\x25\x70\x59\x52\x18\xed\x4a\xa1\x83\x35\xda\x90\x93\x17\x1a\xf6\xbc\x06\xe7\x07\x24\x12\x61\xf5\x5e\x43\x86\xd7\x4c\xc5\x03\xa1\x3f\xbe\xfa\x3c\x29\xf1\xb1\xbd\x14\x7b\xe9\x0b\xbc\xca\xd0\xae\xc0\xe9\x8b\x17\x73\xb8\x4b\xd1\xb1\x73\x82\x5f\x94\x93\xd1\xe6\x75\xca\xb2\xde\x29\xcc\x7a\xa8\x70\x43\x10\x7d\x4d\xb0\x25\x6b\x67\x5d\x83\x0a\x5b\x4c\x9d\x44\xef\x38\x8d\x37\xec\x7b\xcb\xe9\x68\xed\x1f\x27\xef\xde\xbd\x79\xb7\xcc\x92\x69\x40\x95\xa9\xe5\xd1\x9e\x76\xcd\x0e\x6d\xaa\x8c\xf9\xd1\x2c\x45\xe3\x64\x91\x8c\x6d\x0e\x1f\xf1\x5d\xdf\xdb\x97\xb2\x75\x2b\x6d\xa0\xf9\xd8\x3b\xca\xa3\x79\x7c\xfa\x6e\x78\x18\x23\x2f\x88\xa7\xc0\xf1\x3f\x7a\x87\x7b\xb2\x72\x6e\xe2\x19\xeb\x54\xb9\xb7\x83\x28\xff\xa6\x72\xda\xc3\x05\x47\x42\x49\xbf\xc2\x9b\xb8\x48\xf7\x80\x46\xe2\xc2\x6f\x28\x6c\x98\xb6\x8b\xad\x0f\xf7\xec\xca\x99\x86\xe6\x2c\xc7\x40\x5c\xa4\x07\x99\xc5\x0f\xe9\xcf\x77\xeb\x32\xf9\xa2\x33\xa6\x50\xda\xfc\x67\x68\xa5\x7c\xe2\xe2\xbb\x94\xea\x5f\x55\x9e\x5e\xc7\x2e\x6e\x33\x60\x98\xd3\xb3\x9a\x16\xdb\x8a\x4d\xd5\x7f\x39\xe8\x30\x76\x22\x99\x38\x42\x8d\x45\x86\x66\x74\xbb\x3f\x3c\x94\xd5\xa0\xb9\xaf\xdf\xcd\xba\x2f\x58\x33\x74\x85\xfe\x1f\x39\x8a\xce\x7f\x97\x05\x5b\x7e\x52\xfa\xfe\xeb\xfa\xcd\x9f\x13\xe0\x2d\x7f\x57\xae\x3e\xbb\x2d\x1c\x39\x70\x32\xb5\xff\x12\xb8\x79\x89\xb6\xa9\xf0\xe5\x61\x2e\xb5\x53\xb3\xee\xe3\xdf\x60\x19\x20\xbf\xab\x2d\x41\xaf\x04\x79\x42\x7c\xd0\x1b\x71\x9e\x39\x5c\xa9\xb4\x67\x68\x84\x8a\xb7\xa7\x9f\xff\xce\x73\xd1\xea\xbf\xef\xa5\x9f\x83\x37\x37\xf8\xf8\xf9\x2c\x53\xa5\xe2\x43\x2f\x8d\x4e\xfe\x37\x00\x00\xff\xff\x49\xe4\x0b\x7b\x41\x1d\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xc1\x4e\xc3\x30\x0c\x40\xef\xf9\x8a\x68\xf7\x74\xe2\x86\x7a\xe5\xc0\x1d\x21\xee\x5e\xea\x6d\xd6\x92\x38\xb2\x9d\x01\xfb\x7a\xd4\x6e\x15\xd2\x86\xc4\xb6\x03\xe2\x54\xdb\xb2\xfd\x5e\xdb\xc4\x85\x10\x1c\x54\x7a\x43\x51\xe2\xd2\x7b\x59\x41\xec\xa0\xd9\x96\x85\x0e\x60\xc4\xa5\xdb\x3d\x6a\x47\xbc\xdc\x3f\xb8\x1d\x95\xa1\xf7\x4f\xa9\xa9\xa1\xbc\x70\x42\x97\xd1\x60\x00\x83\xde\x79\x1f\x05\xa7\x81\x57\xca\xa8\x06\xb9\xf6\xbe\xb4\x94\x9c\xf7\x05\x32\xf6\x1e\x84\x03\x57\x14\x30\x96\x90\x61\xdc\xe1\xa4\x25\xd4\xde\x05\x0f\x95\x9e\x85\x5b\xd5\x71\x53\xf0\x8b\x85\xf3\x5e\x50\xb9\x49\xc4\x53\x2d\x72\x59\xd3\x26\x43\xd5\x29\x1d\x97\x6a\x85\x88\xc7\x54\x51\xf6\x14\x11\x62\xe4\x56\x6c\xac\xed\x51\x56\xf3\xe8\xa8\x86\x53\x38\x60\xc2\x53\xb8\x41\x9b\x9e\x89\xf4\x18\xb4\x3a\xcc\x6d\xef\x60\x71\x7b\x9d\x97\x62\x14\xbc\x93\x58\x27\xcc\x75\x6c\xa8\xd3\x9b\x9f\xd1\x07\xc0\xcc\x45\xef\x15\xb8\x02\x2b\xdc\x71\xc5\xa2\x5b\x5a\x5b\x47\xfc\xc3\x8f\x39\x1e\x88\x3f\xf8\x02\xb7\xa8\x7c\x27\xcb\x35\x15\x48\x74\xf8\x5f\x8a\x4b\x35\xb0\x76\x66\x34\xb3\x2f\x90\x17\x20\xc5\xd8\x84\xec\xf3\x17\xda\xdc\x16\xb9\x18\x7e\x58\xe4\xa2\x26\x40\x37\xde\x90\x93\xc4\x57\x00\x00\x00\xff\xff\xd6\xd1\xe8\xb3\x2e\x04\x00\x00")

func masterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRoleYaml,
		"master/role.yaml",
	)
}

func masterRoleYaml() (*asset, error) {
	bytes, err := masterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x4e\xc5\x30\x0c\x45\x77\x7f\x85\x7f\x20\x45\x6c\x28\x1b\x30\xb0\x3f\x24\x76\xbf\xd4\xa5\xa6\xad\x1d\x39\x4e\x87\x7e\x3d\xaa\x40\x2c\x48\x9d\xef\x39\xf7\x40\x4a\x09\xa8\xca\x07\x7b\x13\xd3\x8c\x7e\xa7\x32\x50\x8f\xd9\x5c\x0e\x0a\x31\x1d\x96\xa7\x36\x88\x3d\xec\x8f\xb0\x88\x8e\x19\x5f\xd7\xde\x82\xfd\x66\x2b\xbf\x88\x8e\xa2\x9f\xb0\x71\xd0\x48\x41\x19\x10\x95\x36\xce\x48\x6e\xc9\x2a\x3b\x85\x79\xda\xe8\x14\xc0\x6d\xe5\x1b\x4f\x27\x44\x55\xde\xdc\x7a\xbd\x08\x02\xe2\xbf\xde\xe5\x7d\xeb\xf7\x2f\x2e\xd1\x32\xa4\x5f\xf3\x9d\x7d\x97\xc2\xcf\xa5\x58\xd7\xb8\x94\x7f\xb6\x56\xa9\x70\x46\xab\xac\x6d\x96\x29\x12\x1d\xdd\xf9\x0f\x86\xef\x00\x00\x00\xff\xff\xea\x5c\x27\x5f\x2f\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\x0a\xc3\x30\x0c\x45\x77\x9f\x42\x17\x30\x34\x5b\xf0\x35\x0a\xdd\x85\xf3\x4b\x4c\x6b\x4b\x48\x6a\x86\x9e\xbe\xa4\x09\xdd\xba\x09\xbd\xc7\xfb\xac\xed\x06\xf3\x26\xa3\xd0\x36\xa5\x47\x1b\x4b\xa1\x2b\x6c\x6b\x15\xa9\x23\x78\xe1\xe0\x92\x88\x06\x77\x14\x62\x93\x2c\x0a\xe3\x10\xcb\x9d\x3d\x60\x27\x73\xe5\x8a\x42\xa2\x18\xbe\xb6\x7b\x64\x7e\xbf\x0c\x3f\x39\xb9\xa2\xee\x1d\xc7\x13\x35\xc4\xf6\x9b\x88\x55\xff\x45\x55\x2c\xfc\xb0\xf2\xb9\xbe\x46\xe8\xf7\x71\xd0\x42\xf3\x65\x9e\xd2\x27\x00\x00\xff\xff\x04\x58\x19\xc2\xc3\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\xde\xa7\xf0\x05\x5c\x6c\x9b\x6e\xcf\x80\x44\xff\x95\xf9\x88\x08\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x27\x66\x26\x58\xe3\xce\xdc\x23\xbc\xe9\xf5\x27\xaf\xe1\x47\xd3\x1b\xf3\x1a\x9d\xff\xbd\xc7\xe9\x25\x93\x85\x03\x85\x26\xaa\x8e\xc9\xa6\xc8\xb0\x58\x4c\x54\xa4\x4d\xec\x62\x7e\x6d\x2f\x74\x36\x8d\x45\xdf\xcf\xf1\x28\xc3\xfb\x4c\xfe\xb2\x7c\x02\x00\x00\xff\xff\x5b\x98\x41\x31\x75\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\xb1\x0d\xc2\x40\x0c\x05\xd0\xde\x53\x78\x01\x17\xb4\x37\x04\x25\xfd\x27\xf9\x11\x56\x88\xef\x64\x5f\x28\x32\x3d\x4a\xf9\xa4\x27\x66\x26\x18\xfe\x62\x96\xf7\x68\xfa\x7b\xc8\xee\xb1\x36\x7d\xe2\x60\x0d\x2c\x94\x83\x13\x2b\x26\x9a\xa8\x06\x0e\x36\xed\x83\x51\x1f\xdf\xa6\xe1\x3a\x93\xd6\x07\x13\xb3\xa7\xd4\xe0\x72\xb7\xcd\x03\x5f\xbf\x98\x75\xcb\x74\x3f\xdf\xcc\xe0\x64\xc9\x3f\x00\x00\xff\xff\x44\x6f\xf6\xda\x72\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\x31\x4e\x04\x31\x0c\x45\x7b\x9f\xc2\x17\xc8\xac\xe8\x50\x5a\x0a\x7a\x84\xe8\xbd\x33\x86\xb5\x26\x13\x47\xb6\xb3\x2b\x71\x7a\x34\xd9\x9d\x06\x4a\xaa\x3c\x59\xff\xe7\x3f\x48\x29\x01\x35\xf9\x60\x73\xd1\x9a\xd1\xce\x34\x4f\xd4\xe3\xa2\x26\xdf\x14\xa2\x75\x5a\x9f\x7d\x12\x3d\x5d\x9f\x60\x95\xba\x64\x7c\x29\xdd\x83\xed\x4d\x0b\xc3\xc6\x41\x0b\x05\x65\x40\x9c\x8d\x47\xe1\x5d\x36\xf6\xa0\xad\x65\xac\xbd\x14\x40\xac\xb4\x71\x46\x32\x4d\xda\xd8\x28\xd4\xd2\x4d\x6d\x65\x03\xeb\x85\x3d\x43\x42\x6a\xf2\x6a\xda\x9b\xef\x3f\xa5\x3d\x3b\x69\xe3\xea\x17\xf9\x8c\x49\x14\x10\x8d\x5d\xbb\xcd\xfc\x48\xcc\x77\x0b\x07\xc4\x2b\xdb\xf9\xb8\xee\x0e\x3c\x70\xe1\xc2\x0f\xfc\xe2\x18\x6f\x11\xbf\x43\xa3\x98\x2f\x83\x7a\x5b\x8e\xc2\x6d\x1c\xff\xa1\x72\xf2\xa0\xe8\xbf\x8c\x8e\xed\x3f\x93\x3f\x01\x00\x00\xff\xff\x32\xe1\x82\x0f\x7b\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x4e\xc6\x30\x0c\x46\x77\x9f\xc2\x17\x48\x11\x1b\xca\x06\x0c\xec\x3f\x12\xbb\x9b\xba\xd4\xb4\xb5\x23\xc7\x29\x52\x4f\x8f\x10\x88\x05\xa9\xf3\xf7\xde\xf7\x20\xa5\x04\x54\xe5\x8d\xbd\x89\x69\x46\x1f\xa9\x0c\xd4\x63\x31\x97\x93\x42\x4c\x87\xf5\xa1\x0d\x62\x77\xc7\x3d\xac\xa2\x53\xc6\xe7\xad\xb7\x60\xbf\xd9\xc6\x4f\xa2\x93\xe8\x3b\xec\x1c\x34\x51\x50\x06\x44\xa5\x9d\x33\x92\x5b\xb2\xca\x4e\x61\x9e\x3e\xcd\x57\x76\x70\xdb\xf8\xc6\xf3\x37\x44\x55\x5e\xdc\x7a\xbd\x08\x02\xe2\xbf\xde\xe5\x7d\xeb\xe3\x07\x97\x68\x19\xd2\xaf\xf9\xca\x7e\x48\xe1\xc7\x52\xac\x6b\x5c\xca\x3f\x5b\xab\x54\x38\xa3\x55\xd6\xb6\xc8\x1c\x89\xce\xee\xfc\x07\xc3\x57\x00\x00\x00\xff\xff\x21\x49\xf8\xf0\x2f\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\xaa\x03\x41\x08\x06\xe0\xde\x53\x78\x01\x8b\xd7\xda\xbd\x33\x04\xd2\xcb\xec\x1f\x22\xcb\xea\xe0\xb8\x1b\xc8\xe9\xd3\x84\xd4\xdf\x47\x22\x42\x36\xfd\x8e\x5a\x9e\xa1\x7c\xfd\xd1\xee\xb1\x29\xdf\x50\x97\x0f\xfc\x8f\x91\x67\x34\x1d\x68\xdb\xac\x4d\x89\x39\xec\x80\xb2\x55\x4a\x4e\x94\x75\x96\xbc\xb2\x76\xd4\xd7\xd6\xb4\x01\xe5\x9c\x88\xf5\xf4\x47\x8b\xbd\xcf\xc2\x2f\xd3\x27\x00\x00\xff\xff\x5c\x51\x06\x72\x75\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/role.yaml":               masterRoleYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"role.yaml":           {masterRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
