// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcf\x72\xdb\x46\xd2\xbf\xeb\x29\xba\x94\x83\x92\xfa\x44\xf2\x73\xf6\xb2\xcb\x9b\x4b\x4e\x52\xdc\xcd\xda\x2a\x4b\xeb\x8b\xed\x43\x73\xd0\x04\x7a\x35\x98\xc1\xce\x34\x48\xd3\xa9\xbc\xfb\x56\xcf\x00\x24\x48\x01\x96\xec\xaa\x64\x71\x91\xd0\x98\xe9\xff\xfd\xeb\x9e\xe1\xc5\x6c\x36\xbb\xc0\x86\xdf\x51\x88\xec\xdd\x12\xb0\x61\xfa\x24\xe4\xf4\x2d\xce\x1f\xfe\x1a\xe7\xec\x17\xdb\x17\x6b\x12\x7c\x71\xf1\xc0\xae\x58\xc2\x4d\x1b\xc5\xd7\x6f\x29\xfa\x36\x18\x7a\x45\x1b\x76\x2c\xec\xdd\x45\x4d\x82\x05\x0a\x2e\x2f\x00\xd0\x39\x2f\xa8\xe4\xa8\xaf\x00\xc6\x3b\x09\xde\x5a\x0a\xb3\x92\xdc\xfc\xa1\x5d\xd3\xba\x65\x5b\x50\x48\x12\x7a\xf9\xdf\xb7\xee\xc1\xf9\x9d\xfb\xe1\x02\xc0\x04\x4a\x1c\xee\xb9\xa6\x28\x58\x37\x4b\x70\xad\xb5\x17\x00\x0e\x6b\x5a\x82\xb1\x6d\x14\x0a\x71\x8e\xc1\xcf\x7d\x43\x2e\x56\xbc\x91\x39\xfb\x8b\xd8\x90\x51\xb1\x65\xf0\x6d\xb3\x84\x47\xdf\x33\x87\x4e\xb3\xce\xaa\xcc\x2c\x51\x2c\x47\xf9\xc7\x90\xfa\x2b\x47\x49\x5f\x1a\xdb\x06\xb4\x47\xd1\x89\x18\xd9\x95\xad\xc5\x70\x20\x5f\x00\x44\xe3\x1b\x1a\x72\x8d\xed\x3a\x74\x2e\xeb\xe4\x46\x41\x69\xe3\x12\x7e\xfb\xfd\x02\x60\x8b\x96\x8b\x64\x6d\xfe\xa8\xea\xbe\xbc\x5d\xbd\xfb\xcb\x9d\xa9\xa8\xc6\x4c\x04\x28\x28\x9a\xc0\x4d\x5a\xd7\x33\x07\x8e\x20\x15\x41\x5e\x09\x1b\x1f\xd2\x6b\xaf\x22\xbc\xbc\x5d\x75\xbb\x9b\xe0\x1b\x0a\xc2\xbd\x06\xfa\x0c\x82\x7f\xa0\x9d\xc9\xb9\x52\x45\xf2\x1a\x28\x34\xdc\x94\x05\x76\x41\xa3\x02\x62\x16\xed\x37\x20\x15\x47\x08\xd4\x04\x8a\xe4\x72\x02\x0c\xd8\x82\x2e\x41\x07\x7e\xfd\x6f\x32\x32\x87\x3b\x0a\xca\x04\x62\xe5\x5b\x5b\x68\x8e\x6c\x29\x08\x04\x32\xbe\x74\xfc\xf9\xc0\x39\x82\xf8\x24\xd2\xa2\x50\x17\x8a\xfe\x61\x27\x14\x1c\x5a\x75\x61\x4b\xd7\x80\xae\x80\x1a\xf7\x10\x48\x65\x40\xeb\x06\xdc\xd2\x92\x38\x87\x7f\xfa\x40\xc0\x6e\xe3\x97\x50\x89\x34\x71\xb9\x58\x94\x2c\x7d\xba\x1b\x5f\xd7\xad\x63\xd9\x2f\x52\xd2\xf2\xba\x15\x1f\xe2\xa2\xa0\x2d\xd9\x45\xe4\x72\x86\xc1\x54\x2c\x64\xa4\x0d\xb4\xc0\x86\x67\x49\x71\x97\xb2\x7d\x5e\x17\xdf\x1d\x02\x7d\x35\xd0\x54\xf6\x9a\x10\x51\x02\xbb\xf2\x40\x4e\xb9\x37\xe9\x77\xcd\x41\x8d\x2e\x76\xdb\xb2\xfe\x47\xf7\x2a\x49\xbd\xf2\xf6\xa7\xbb\x7b\xe8\x85\xa6\x10\x9c\xfa\x3c\x79\xfb\xb8\x2d\x1e\x1d\xaf\x8e\x62\xb7\xa1\x90\x03\xb7\x09\xbe\x4e\x1c\xc9\x15\x8d\x67\x27\x5d\x26\x31\xb9\x53\xa7\xc7\x76\x5d\xb3\x68\xa4\xff\xd3\x52\x14\x8d\xcf\x1c\x6e\x52\xd1\xc3\x9a\xa0\x6d\x0a\x14\x2a\xe6\xb0\x72\x70\x83\x35\xd9\x1b\x8c\xf4\x87\xbb\x5d\x3d\x1c\x67\xea\xd2\xa7\x1d\x3f\xc4\xaa\xd3\x85\xd9\x5b\x07\x72\x0f\x25\xa3\x11\xea\x2a\xf0\xae\x21\x73\x52\x19\x05\x45\x0e\x9a\xbd\x82\x42\x9a\xf3\x43\x74\x99\xae\xc5\x54\x8f\x26\xbc\x56\x74\x3b\x21\x4e\x18\xa1\x4f\x49\x8e\xb6\xf8\xab\x2f\x4b\x76\xe5\xf9\xae\x29\x21\x90\x01\x79\xc3\xe5\x48\xed\x1f\x36\xa3\x68\x65\x2d\xe1\xea\xfd\xff\xcf\xfe\xf6\xf1\xff\xe6\xf9\xcf\xd5\xc8\xd2\x49\xed\x92\xab\xbd\x63\xf1\xfa\xe9\x97\x9b\xbb\x9f\xdc\x96\x83\x77\x35\x39\x19\x93\x49\xae\xad\xc7\xe8\x33\x78\xc5\x58\x3a\x1f\x85\x4d\xbc\x0d\xbe\x18\x5d\x73\x7f\x8e\x0d\x4f\x6a\x37\x1a\x72\x38\xa0\x0a\xc9\x4d\x45\xe6\x81\xc2\xd7\x38\xb6\x0d\x76\x84\x0a\xc0\x42\xf5\xe8\x87\x27\xfc\xd7\x7f\xc6\x10\x70\xff\x5c\xfd\xad\x37\x83\x6e\xf2\x0c\x49\x3d\x7c\xac\x8a\xf3\x2d\x27\x19\xdf\xb7\xfd\xd5\xab\xbe\xed\xbc\xfc\xdc\x06\x1a\x6c\xcf\x5d\x80\x06\xbd\xf0\x19\xf2\xc7\x4b\x2f\x37\xc8\xa7\x8a\x2f\xad\x3a\x29\x3f\xbf\x8e\x8a\x6f\xdf\x54\x7f\xc6\xbb\x82\x07\x73\xcb\x94\xf0\xc3\xb2\x0e\xa0\x49\x92\x9c\x9e\x0c\xec\xa2\xa0\x33\x14\xe7\x67\x6c\x26\xd2\xe0\x84\xfb\xe5\x91\xcf\x11\xb5\x73\xe3\x54\xcb\x52\x64\x4f\x5a\xe9\x55\xcc\xb6\x9e\x0b\xd3\x67\xa0\x2a\x06\xd2\x3d\x87\x09\x0f\x6a\x32\x15\x3a\x8e\x75\x4a\x78\x57\x50\xa1\x9d\x56\x11\x3c\x52\x01\xbb\x8a\x9c\x3a\x74\x84\x69\x41\x82\x6c\xe3\x41\x89\xa3\x5a\x2a\x43\xdb\x00\x42\x13\xd8\x07\x86\x34\xcf\x81\x0f\xb0\x4b\x4d\x3e\x7d\x6b\x1a\x7b\x9e\xca\x29\x0d\x3c\xa0\xb5\x47\xdf\x25\xf6\x50\xf2\x96\x1c\x68\x33\x9c\xc3\x07\x37\xb4\xa7\x9b\x1b\xd6\x04\x58\x14\x34\x06\x0a\xe2\x81\x3e\x35\x96\x0d\x8b\xdd\xe7\x01\x63\x3f\x88\x3d\x48\x85\xa2\xc6\x86\x98\x06\x07\xe3\xeb\xc6\xbb\xe4\x6d\x93\x9c\xb5\xf6\xed\x18\xa4\x04\x94\x2a\x35\x4d\x74\xa9\x07\x72\xc8\xbd\xd8\x47\x3a\xe1\x9e\x7c\x99\x1a\xac\xb6\x83\xd4\x5e\xbd\xee\x1c\x61\x39\xf0\x61\x9c\xc3\x1b\x67\xa8\xcb\xe9\xe2\x3a\x25\x75\x4d\xe8\x54\x48\x72\xc9\x31\x3f\x0c\x3a\xc8\x5d\x77\x84\xa7\x06\xb7\xa4\x02\x30\xac\x59\x02\x06\xb6\x7b\x98\x01\xeb\x6a\xe3\x6b\x8a\xd0\x60\x90\xbe\x60\x5f\xde\xae\xf2\xf4\x54\x61\x2e\xa3\x88\xf5\x18\xd3\x35\x9a\x87\x1d\x86\x22\xce\xd2\xea\x8d\x0f\xf9\x4d\x7d\x87\xc2\x6b\xb6\x2c\xc9\xd5\x86\x82\xeb\x32\x64\x9f\xcd\x4e\xf2\xc6\x6c\x3f\x68\x30\xbf\x7c\xf4\xf9\x4b\x58\x0b\x60\x31\xca\x7d\x40\x17\xb9\x3f\x2a\x8c\x43\xec\xc6\x87\x1a\x65\x09\x3a\x98\xcc\x84\x47\x2d\x7b\x12\x88\x6b\x8a\x11\xcb\x09\x09\x4f\xec\x0d\x84\x71\xbc\xd1\x4e\x41\xcb\xdb\xb4\x43\xf1\xe5\xac\x38\x11\xbc\xa3\xd9\xce\x87\xe2\xfa\x38\x5e\x8d\x32\x86\xb3\x59\xfc\x00\xce\x28\x54\xfa\xb0\xd7\x77\x83\x6d\xa4\xc3\x87\x36\x04\x72\xd2\x61\xef\x18\x9c\xe8\xb3\x92\x11\xad\x12\x64\xb0\x4b\x91\x67\xe5\xd8\x4a\xd3\xca\x35\xc4\xd6\x54\x80\x31\xe9\x6c\xd9\x4d\x29\xaa\x27\x42\x23\x16\x4a\x45\xd2\x6e\xab\xe6\x17\x3b\x88\x6d\x5d\x63\xe0\xcf\x29\xfd\x4d\x56\xb1\x43\x87\xa4\xfc\x84\x9e\x4f\x04\xe4\x71\x7b\x79\xf6\xd6\xf4\xf9\xe9\x48\x1e\x61\xfc\x7e\xdf\x50\xdf\x30\x75\xf3\xc1\xdd\x87\x3a\x4e\xa6\xc6\x09\xdf\xc8\xbe\x61\x83\xd6\xee\xb5\xf4\xfb\x80\x17\xa0\x19\xa0\xc0\x1a\x2b\x1f\x04\x9a\x2a\xa4\x29\x7b\x08\x91\x49\xd8\x14\xd7\x0e\x3d\xd9\x15\xac\xf9\xd0\x75\x4b\x4e\x90\x0f\x1f\x2e\x71\xed\xb4\x66\xec\x4c\x42\x4b\x1f\x2e\xa1\xf1\x16\x03\xcb\x7e\x0e\x3f\xfb\x31\x00\xd3\x87\x3e\x61\xdd\x58\xba\x06\x3e\xb7\xaf\x97\x12\x73\x57\x41\x65\xc7\x66\x9f\xf3\x28\x9d\x7e\xaf\xa7\x8c\x4f\xda\x70\xcc\x67\xe4\x0f\x97\x60\x30\x26\x67\x36\xc1\xaf\x71\x6d\xf7\x69\x85\xea\x7a\x0d\xd1\x9f\x8a\xfd\xb2\xe5\x6b\x2d\x04\x6b\xa9\x80\x0f\x97\x2b\xd7\xb1\x1f\x41\x20\x78\x2a\x23\x72\x0b\xa0\x47\xa3\x93\x0e\xa5\x39\xcd\x46\x3e\x28\xc7\x47\xe4\xc9\x81\x6e\x7a\x0a\x54\x74\x44\xf1\x61\x62\x94\xff\xc2\xc4\xa7\xa7\xe9\xe2\x4d\x92\xf5\xa8\x0e\x9e\x33\xa6\xe4\xad\x6f\x69\x43\xa9\x20\xd3\x1d\x0f\xb2\x8b\x40\xce\xb7\x65\x95\x8e\x7a\x8a\xba\x29\x11\x3d\x58\x12\xd8\xfb\x76\x6c\x34\x76\x7a\xcc\x12\xcd\xe5\xda\x17\xbc\xc9\x21\x0d\xd4\xf5\xcd\xee\xba\xe0\x2b\x3b\xc3\xf8\xcd\xc6\x84\x29\x2f\x6f\x57\xfd\x7d\x46\x5f\x9b\x21\xdb\x35\x22\xf7\x8b\x6e\xcd\xcf\x86\xc9\x16\xb7\x28\xd5\x33\x64\x5f\xad\x36\x9d\xad\x69\x88\xf0\x5a\x1c\x4c\x86\x4e\x26\xbc\x34\x14\x11\xea\x78\x3d\x91\xd4\x3a\xd8\x39\xe1\x40\xdd\x8e\xeb\x7c\xa6\xef\xae\x0e\x8e\x57\x2c\x1a\x22\xc0\x5c\x4d\xf0\xf7\xbb\x37\xaf\x17\xbf\xf8\x09\x96\xc9\x0a\x40\x63\x28\x76\x03\xa6\x1e\xdc\x8e\x90\xde\x9d\x73\xef\xd2\xe8\x59\xa3\xe3\x0d\x45\x99\x77\x32\x28\xc4\xf7\x3f\x7e\x9c\x6a\x21\x3f\xfb\xf0\x08\x2d\x0e\x17\x15\x7d\x42\x71\xcc\xee\x38\x70\x84\x1d\x4b\xc5\x53\x65\xad\xa0\x52\x74\x66\xe7\x61\x53\xf0\x81\xc0\x77\xe6\xb6\x04\x96\x1f\x68\x09\x97\x9a\x6d\x03\x35\x7f\x73\x58\xd3\xef\xe3\x75\x0f\xf0\xfd\xae\xa2\x40\x70\xa9\x8b\x2e\xb3\x72\x87\xfb\x28\xa5\x0d\xb0\xbc\x53\x32\x0d\x95\x12\xb8\x2c\x29\x8c\x4e\xa5\xd0\xc1\x1a\x6d\xc9\xc9\x0f\x9a\xf6\xbc\x01\xe7\x07\x2c\x12\x63\x8d\x5e\x43\x86\x37\x4c\xc5\x23\xa5\xdf\xff\xf8\x71\x52\xe3\x53\x7f\x29\xf6\xd2\x27\xf8\x31\x43\xbb\x02\xa7\x2f\x7e\x98\xc3\x7d\xca\x8e\xbd\x13\xfc\xa4\x92\x8c\x0e\xaf\x53\x9e\xf5\x4e\x61\xd6\x43\x85\x5b\x82\xe8\x6b\x82\x1d\x59\x3b\xeb\x06\x54\xd8\x61\x9a\x24\xfa\xc0\x69\xbe\x61\x3f\x5b\x4e\x67\x6b\x7f\x0b\x78\xff\xe6\xd5\x9b\x65\xd6\x4c\x13\xaa\x4c\x23\x8f\xce\xb4\x1b\x76\x68\x53\x67\xcc\xb7\x53\x29\x1b\x27\x9b\x64\x6c\x73\xfa\x88\xef\xe6\xde\xbe\x95\x6d\x5a\x69\x03\xcd\xc7\x2e\x2e\x9e\xac\xe3\xf3\x0b\xba\xe3\x33\x72\x55\x77\x0e\x1c\xff\xa3\x0b\xaf\x67\x1b\xe7\x46\x2e\x9a\xc6\x8c\x7b\x3d\xc8\xf2\x2f\x1a\xa7\x33\x5c\x70\x24\x94\xec\x2b\xbc\x89\x8b\x74\x0e\x68\x24\x2e\xfc\x96\xc2\x96\x69\xb7\xd8\xf9\xf0\xc0\xae\x9c\x69\x6a\xce\x72\x0e\xc4\x45\xba\x8f\x5f\x7c\x97\xfe\x7c\xb3\x2d\xb1\x41\xf3\x6c\x83\xd2\xe2\x3f\xc3\x2a\x95\x13\x17\xdf\x64\x54\x7f\xab\xf2\xfc\x3e\x76\x75\x97\x01\xc3\x9c\xef\xd5\xb2\xd8\x55\x6c\xaa\xfe\x8a\xbe\xc3\xd8\x89\x62\xe2\x08\x35\x16\x19\x9a\xd1\xed\xff\xf0\x54\x56\x87\xe6\xb9\x7e\x3f\xeb\x7e\x2a\x9a\xa1\x2b\xf4\xff\xc8\x51\x94\xfe\x4d\x1e\x6c\xf9\x59\xe5\xfb\xaf\xd5\xab\x3f\x27\xc1\x5b\xfe\xa6\x5a\xfd\xea\xb1\x70\x64\xc3\x19\xe9\xf0\x93\xdb\xf6\x05\xda\xa6\xc2\x17\x47\x5a\x1a\xa7\x66\xdd\xaf\x6c\x83\xcf\x00\xf9\x5e\x6d\x09\x7a\x24\xc8\x04\xf1\x41\x4f\xc4\x99\x72\x3c\x52\xe9\xcc\xd0\x08\x15\xaf\xcf\x7f\x67\xbb\xcc\x4d\xab\xff\x21\x2d\xbd\x0e\xee\xdc\xe0\xfd\xc7\x8b\xcc\x95\x8a\x77\xbd\x36\x4a\xfc\x6f\x00\x00\x00\xff\xff\x5f\xe3\x73\x3a\xaa\x1c\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xbd\x8e\xdb\x30\x0c\xde\xfd\x14\xc4\xed\xbe\x9f\xed\xa0\xed\xd0\x0b\xba\x14\x41\xd1\xf4\xba\x33\x32\x93\x08\x91\x44\x81\xa4\x83\x4b\x9f\xbe\x50\x1d\x2b\x0e\x0a\xa4\x9c\x0c\x7e\xfc\x7e\x48\x19\x4b\xf8\x45\xa2\x81\xb3\x03\x2c\x45\x9f\x4e\x2f\xdd\x31\xe4\xc1\xc1\x3b\x95\xc8\xe7\x44\xd9\xba\x44\x86\x03\x1a\xba\x0e\x20\xe2\x96\xa2\xd6\x2f\xa8\x04\x07\x28\xdc\x73\x21\x41\x63\xe9\x13\xaa\x91\x74\x00\x19\x13\xdd\xc3\xb4\xa0\x27\x07\x5c\x28\xeb\x21\xec\xac\xc7\xdf\xa3\x50\x1b\xee\xb4\x90\xaf\x26\x42\x25\x06\x8f\xea\xe0\xa5\x03\x50\x8a\xe4\x8d\x65\xb2\x4f\x68\xfe\xf0\x6d\x91\xe7\x6e\x22\x35\x41\xa3\xfd\x79\x1a\x15\x8e\x31\xe4\xfd\x47\x19\xd0\x68\x66\x27\xfc\xdc\x8c\xb2\xa7\xc9\xec\xd2\xf9\xc8\x78\xc2\x10\x71\x1b\xc9\xc1\x73\x07\x60\x94\x4a\x6c\xac\xe5\x6d\x6a\xc5\x9b\x3c\x77\x13\x01\xcc\x5b\xd6\xf2\x9c\x0d\x43\x26\x69\xe4\x1e\x3c\xa7\x84\x79\xb8\xaa\xf5\x55\xea\xaa\x2d\x7b\x5d\x62\xed\x7a\xd7\xd6\xc2\xac\x56\x48\x58\xd7\xfb\xba\x5a\xaf\x7e\xbc\xfd\x5c\xbd\x37\xe0\xdf\xf7\x6a\x50\x61\xb1\x1b\x9b\x96\xf4\x3b\x8b\x39\x78\x7d\x7e\x7d\x6e\xe8\xac\x74\x30\x2b\x97\x66\xe6\x81\x36\x37\x0f\x37\x77\x7b\xe1\x48\x8f\xc7\x71\x4b\x92\xc9\x48\x1f\x03\x3f\x4d\x81\x1d\x3c\x3c\x5c\x46\x95\xe4\x14\x3c\xbd\x79\xcf\x63\xb6\xf5\x9d\xff\xea\x6f\x58\x09\x2c\xc1\xce\x5f\x22\xaa\x4e\xc3\x7a\x56\xa3\xd4\xfb\x38\xd6\xb9\xde\x4b\xb0\xe0\x31\x5e\x08\xc6\xb1\xea\x04\xce\x8b\xbb\x1f\xe9\xec\xfe\x93\xb0\x2d\x32\xe7\x70\xb0\xfa\x0c\x6a\xda\x00\xda\xed\xc8\x9b\x83\x35\x6f\xfc\x81\x86\x31\x52\xf7\x27\x00\x00\xff\xff\xf5\xb6\xb6\x54\x6e\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\x43\x31\x0c\x40\x77\x9f\xc2\x17\xf0\x47\x6c\x28\x1b\x30\xb0\x17\x89\xdd\xcd\x77\xa9\xe9\x8f\x1d\x39\x4e\x87\x9e\x1e\x55\x45\x5d\x90\xba\xda\xef\xf9\x19\x88\x08\xb8\xeb\x97\xc4\x50\xb7\x82\xb1\xe7\xba\xf0\xcc\xa3\x87\x5e\x38\xd5\x6d\x39\xbd\x8c\x45\xfd\xe9\xfc\x0c\x27\xb5\xb5\xe0\xfb\x36\x47\x4a\xec\x7c\x93\x37\xb5\x55\xed\x1b\x9a\x24\xaf\x9c\x5c\x00\xd1\xb8\x49\x41\x0e\x27\xef\x12\x9c\x1e\xd4\xf8\x2a\x40\xf8\x26\x3b\x39\x5c\x21\xee\xfa\x11\x3e\xfb\x83\x20\x20\xfe\xeb\xdd\xcf\xd7\xdb\x8c\x78\x6d\x6a\x30\xe6\xfe\x47\x6a\x8e\x02\xf4\xe7\x7c\x4a\x9c\xb5\xca\x6b\xad\x3e\x2d\x1f\x7e\x75\xdb\x8d\xce\x55\x0a\x7a\x17\x1b\x47\x3d\x24\xf1\x65\x86\xdc\x61\xf8\x0d\x00\x00\xff\xff\x89\x0c\x00\x1f\x29\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\x0a\xc3\x30\x0c\x45\x77\x9f\x42\x17\x30\xa4\x5b\xf0\x35\x0a\xdd\x85\xf3\x4b\x4c\x6b\x4b\x48\x6a\x86\x9e\xbe\xa4\x09\xdd\xba\x09\xbd\xc7\xfb\xac\xed\x06\xf3\x26\xa3\xd0\x76\x49\x8f\x36\x96\x42\x57\xd8\xd6\x2a\x52\x47\xf0\xc2\xc1\x25\x11\x0d\xee\x28\xc4\x26\x59\x14\xc6\x21\x96\x3b\x7b\xc0\x4e\xe6\xca\x15\x85\x44\x31\x7c\x6d\xf7\xc8\xfc\x7e\x19\x7e\x72\x72\x45\xdd\x3b\x8e\x27\x6a\x88\xed\x37\x11\xab\xfe\x8b\xaa\x58\xf8\x61\xe5\x73\x7d\x8d\xd0\xef\xe3\xa0\x85\xe6\x69\x9e\xd2\x27\x00\x00\xff\xff\x45\x69\x02\xdb\xc3\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\xde\xa7\xf0\x05\x5c\x6c\x9b\x6e\xcf\x80\x44\xff\x95\xf9\x88\x08\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x27\x66\x26\x58\xe3\xce\xdc\x23\xbc\xe9\xf5\x27\xaf\xe1\x47\xd3\x1b\xf3\x1a\x9d\xff\xbd\xc7\xe9\x25\x93\x85\x03\x85\x26\xaa\x8e\xc9\xa6\xc8\xb0\x58\x4c\x54\xa4\x4d\xec\x62\x7e\x6d\x2f\x74\x36\x8d\x45\xdf\xcf\xf1\x28\xc3\xfb\x4c\xfe\xb2\x7c\x02\x00\x00\xff\xff\x5b\x98\x41\x31\x75\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\x31\x6e\x84\x40\x0c\x05\xd0\xde\xa7\xb0\xe8\x27\x51\xda\x39\x44\xca\xf4\x0e\x7c\xb4\x16\x60\x8f\x6c\xb3\x05\xa7\x5f\xb1\xcd\xf6\xef\x51\x6b\x8d\x64\xe8\x1f\x22\xd5\xad\xf3\xf3\x87\x36\xb5\xa5\xf3\xaf\x1c\xc8\x21\x33\xe8\x40\xc9\x22\x25\x9d\x98\x4d\x0e\x74\xf6\x01\xcb\x87\xae\xd5\xe4\x3a\x03\xcd\x07\x42\xca\x83\x98\xc5\xcc\x4b\x4a\xdd\xf2\xf6\xfc\xb1\x5f\xea\xdf\xe6\x0b\x5a\x62\xc7\x5c\x1e\x9d\xa7\x89\x72\x60\xbe\xe1\xaa\x26\xbb\x5e\x88\x77\x6b\xbc\x9d\xff\x08\x43\x21\xe9\x15\x00\x00\xff\xff\x88\xe0\x2e\x1f\xa4\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xb1\x6e\xdc\x30\x0c\xdd\xf5\x15\x44\x76\x25\xcd\xaa\x2d\x68\x0e\x5d\x8a\x0c\x4d\xd3\x9d\x27\xb3\x8e\x70\x92\x28\x90\xf4\xb5\xee\xd7\x17\x82\xef\x7c\x0e\x02\x98\x93\xc1\xf7\x1e\xdf\x23\x2d\x6c\xe9\x17\x89\x26\xae\x01\xb0\x35\x7d\x38\x3f\xba\x53\xaa\x43\x80\x67\x6a\x99\xe7\x42\xd5\x5c\x21\xc3\x01\x0d\x83\x03\xc8\x78\xa4\xac\xfd\x0b\xba\x20\x00\x0a\x7b\x6e\x24\x68\x2c\xfe\x0f\xcb\x89\xc4\x01\x54\x2c\xb4\x87\x69\xc3\x48\x01\xb8\x51\xd5\xf7\xf4\xdb\x3c\xfe\x9b\x84\x56\xb2\xd3\x46\xb1\x9b\x08\xb5\x9c\x22\x6a\x80\x47\x07\xa0\x94\x29\x1a\xcb\x62\x5f\xd0\xe2\xfb\xf7\x4d\x9e\xdd\x44\x6a\x82\x46\xe3\xbc\x50\x85\x73\x4e\x75\x7c\x6b\x03\x1a\x5d\xd5\x05\xff\xbe\x4e\x32\xd2\x62\x76\xe9\xbc\x55\x3c\x63\xca\x78\xcc\x14\xe0\x8b\x03\x30\x2a\x2d\xaf\xaa\xed\x6d\x7a\xe5\x0f\x79\x76\x13\x01\x5c\xb7\xec\x15\xb9\x1a\xa6\x4a\xb2\x8a\x3d\x44\x2e\x05\xeb\x70\x9b\xe6\xfb\xa8\xdb\x6c\x19\x75\x8b\xad\xd7\xbb\xb5\x36\x66\xbd\x52\xc1\xbe\xde\xb7\xc3\xcb\xe1\xc7\xd3\xcf\xc3\xf3\x0a\x7c\xfe\x5f\x17\xa8\xf2\x40\xaf\x1f\xce\x7e\xed\x7a\xe1\x4c\xf7\xa7\xe9\x48\x52\xc9\x48\xef\x13\x3f\x2c\x76\x01\xee\xee\x2e\x54\x25\x39\xa7\x48\x4f\x31\xf2\x54\xed\x65\xe7\x55\xf4\x6a\x92\x58\x92\xcd\x5f\x33\xaa\x2e\x64\x9d\xd5\xa8\xf8\x98\x27\x35\x12\x1f\x25\x59\x8a\x98\xdd\xff\x00\x00\x00\xff\xff\x1c\x57\xc1\x70\xb9\x02\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x4e\xc6\x30\x0c\x46\x77\x9f\xc2\x17\x48\x11\x1b\xca\x06\x0c\xec\x3f\x12\xbb\x9b\xba\xd4\xb4\xb5\x23\xc7\x29\x52\x4f\x8f\x10\x88\x05\xa9\xf3\xf7\xde\xf7\x20\xa5\x04\x54\xe5\x8d\xbd\x89\x69\x46\x1f\xa9\x0c\xd4\x63\x31\x97\x93\x42\x4c\x87\xf5\xa1\x0d\x62\x77\xc7\x3d\xac\xa2\x53\xc6\xe7\xad\xb7\x60\xbf\xd9\xc6\x4f\xa2\x93\xe8\x3b\xec\x1c\x34\x51\x50\x06\x44\xa5\x9d\x33\x92\x5b\xb2\xca\x4e\x61\x9e\x3e\xcd\x57\x76\x70\xdb\xf8\xc6\xf3\x37\x44\x55\x5e\xdc\x7a\xbd\x08\x02\xe2\xbf\xde\xe5\x7d\xeb\xe3\x07\x97\x68\x19\xd2\xaf\xf9\xca\x7e\x48\xe1\xc7\x52\xac\x6b\x5c\xca\x3f\x5b\xab\x54\x38\xa3\x55\xd6\xb6\xc8\x1c\x89\xce\xee\xfc\x07\xc3\x57\x00\x00\x00\xff\xff\x21\x49\xf8\xf0\x2f\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\xaa\x03\x41\x08\x06\xe0\xde\x53\x78\x01\x8b\xd7\xda\xbd\x33\x04\xd2\xcb\xec\x1f\x22\xcb\xea\xe0\xb8\x1b\xc8\xe9\xd3\x84\xd4\xdf\x47\x22\x42\x36\xfd\x8e\x5a\x9e\xa1\x7c\xfd\xd1\xee\xb1\x29\xdf\x50\x97\x0f\xfc\x8f\x91\x67\x34\x1d\x68\xdb\xac\x4d\x89\x39\xec\x80\xb2\x55\x4a\x4e\x94\x75\x96\xbc\xb2\x76\xd4\xd7\xd6\xb4\x01\xe5\x9c\x88\xf5\xf4\x47\x8b\xbd\xcf\xc2\x2f\xd3\x27\x00\x00\xff\xff\x5c\x51\x06\x72\x75\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
